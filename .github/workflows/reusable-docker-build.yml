---
name: Reusable-Docker-Build

on:
  workflow_call:
    inputs:
      build-context:
        type: string
        description: The build context path
        required: false
        default: "."
      build-dockerfile:
        type: string
        description: The build path to the Dockerfile, relative to the context
        required: false
        default: "Dockerfile"
      build-labels:
        type: string
        description: Labels set to the build
        required: false
        default: "MAINTAINER=${{ github.actor }},REPO=${{ github.repository }}"
      build-platforms:
        type: string
        description: The platforms to build the image for
        required: false
        default: "linux/amd64"
      ci-registry:
        type: string
        description: The address of the Container Registry
        required: true
        default: "rg.fr-par.scw.cloud"
      ci-registry-image:
        type: string
        description: The address of the project Container Registry
        required: true
        default: ""
      push:
        type: boolean
        description: If images shoud be pushed
        required: false
        default: true
      scan-image:
        type: boolean
        description: If image should be scaned for vulnerabilities
        required: false
        default: true
      scan-image-severity:
        type: string
        description: Severities of vulnerabilities to scanned for and displayed. Supports UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        required: false
        default: "HIGH,CRITICAL"
      scan-image-trivy-config:
        type: string
        description: Path to trivy-config
        required: false
        default: ""
    secrets:
      build-args:
        description: Args passed to the build-process
        required: false
      CI_REGISTRY_USER:
        description: Container registry user
        required: true
      CI_REGISTRY_PASSWORD:
        description: Container registry PW/Token
        required: true
    outputs:
      docker-digest:
        description: The Docker Image DIGEST sha
        value: ${{ jobs.build-image.outputs.DOCKER_DIGEST }}

jobs:
  build-image:
    runs-on: ubuntu-20.04
    outputs:
      DOCKER_DIGEST: ${{ steps.build-and-push.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:latest
        platforms: all

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        buildkitd-flags: --debug

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.ci-registry }}
        username: ${{ secrets.CI_REGISTRY_USER }}
        password: ${{ secrets.CI_REGISTRY_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.ci-registry }}/${{ inputs.ci-registry-image }}
        tags: |
          type=edge,enable=true,branch=main
          type=ref,enable=true,event=branch
          type=sha,enable=true,prefix=sha-,suffix=,format=short
        labels: ${{ inputs.build-labels }}

    - name: Build and push
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        push: ${{ inputs.push }}
        file: ${{ inputs.build-dockerfile }}
        context: ${{ inputs.build-context }}
        build-args: ${{ secrets.build-args }}
        platforms: ${{ inputs.build-platforms }}
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        cache-from: "type=gha,scope=${{ inputs.ci-registry-image }}-cache"
        cache-to: "type=gha,scope=${{ inputs.ci-registry-image }}-cache,mode=max"

  scan-image:
    runs-on: ubuntu-20.04
    if: inputs.scan-image
    needs: build-image

    steps:
    - uses: benjlevesque/short-sha@v2.2
      id: short-sha
      with:
        length: 7

    - name: Which image are we scanning?
      run: |
        echo "Image to scan: ${{ inputs.ci-registry }}/${{ inputs.ci-registry-image }}:sha-${{ steps.short-sha.outputs.sha }}"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ inputs.ci-registry }}/${{ inputs.ci-registry-image }}:sha-${{ steps.short-sha.outputs.sha }}
        severity: ${{ inputs.scan-image-severity }}
        exit-code: "1"
        vuln-type: "os,library"
        hide-progress: false
        trivy-config: ${{ inputs.scan-image-trivy-config }}
        format: "table"
      env:
        TRIVY_USERNAME: ${{ secrets.CI_REGISTRY_USER }}
        TRIVY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
